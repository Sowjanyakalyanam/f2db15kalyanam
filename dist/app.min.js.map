{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","config","path","process","env","MONGO_CON","mongoose","connect","connectionString","useNewUrlParser","useUnifiedTopology","console","indexRouter","usersRouter","db","connection","gridbuildRouter","on","bind","once","app","recreateDB","urlencoded","Employee","EmpName","EmpType","EmpSal","save","err","doc","use","error","EmployeeRouter","log","set","join","__dirname","json","extended","resourceRouter","selectorRouter","reseed","req","res","next","instance1","message","locals","instance2","module","exports"],"mappings":"aAAA,IAAIA,YAAcC,QAAQ,eACtBC,QAAUD,QAAQ,WADlBD,KAAAA,QAAcC,QAGdE,aAAeF,QAAQ,iBAFvBC,OAAOD,QAAU,UAIrBA,QAAQ,UAAUG,SAHlB,IAAIC,iBAKJC,QAAQC,IAAIC,UAJZC,SAAIN,QAAeF,YAMnBQ,SAASC,QAAQC,iBALjB,CAAAC,iBAAaX,EAObY,oBAAoB,IALpB,IAAMF,GAAAA,SAAAA,WAGNF,GAAAA,GAAAA,QAASC,QAAQC,MAAAA,KAAjBG,QACA,6BAACF,GAAAA,KAAAA,OAAAA,WACDC,QAAAA,IAAAA,gCADA,IAEAE,YAAAd,QAAA,kBAQIe,YAAcf,QAAQ,kBANtBgB,eAAcC,QAOW,qBACzBC,gBAAkBlB,QAAQ,sBAN3BmB,eAAYN,QAAcO,qBAC1BC,eAAarB,QAAU,qBAC1Ba,SAAYb,QAAA,qBADZsB,IAAArB,UAeAqB,SAAeC,aAAfD,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAEQrB,SAAQuB,cAFhBF,KAAAA,EAEuC,IAAAG,SAAA,CAAAC,QAAA,QAAAC,QAAA,YAAAC,OAAA,MAAvCC,KAAA,SAAAC,EAAAC,GACIC,GAAI9B,EAAAA,OAAYW,QAApBoB,MAAAH,GACIE,QAAI/B,IAAO,wBAGGc,IAAAA,SAAlB,CAAAW,QAAA,MAAAC,QAAA,YAAAC,OAAA,MACQC,KAAR,SAAsBX,EAAAA,GAClBc,GAAIF,EAAA,OAAaI,QAAAA,MAArBJ,GACIE,QAAIG,IAAA,yBAiBc,IAAIV,SAAS,CAACC,QAAQ,SAAUC,QAAQ,YAAYC,OAAO,MAblEL,KAAf,SAAAO,EAAAC,GAAA,GAAAD,EAAA,OAAAjB,QAAAoB,MAAAH,GAAAjB,QAAAsB,IAAA,wBAdAb,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,UAHAA,IAAIc,IAAI,QAAShC,KAAKiC,KAAKC,UAAW,UATtChB,IAAIP,IAAAA,cAAcf,OAClBsB,IAAIY,IAAAA,OAAAA,QAYJZ,IAAIU,IAAI/B,QAAQsC,QAXhBjB,IAAIJ,IAAAA,QAAAA,WAAkBlB,CAAOwC,UAAC,KAa9BlB,IAAIU,IAAI9B,gBAZRoB,IAAImB,IAAAA,QAAAA,OAAiBzC,KAAOqC,KAACC,UAAA,YAC7BhB,IAAIoB,IAAAA,IAAAA,aAeJpB,IAAIU,IAAI,SAAUjB,aAdlBO,IAAIG,IAAAA,aAAkBP,iBAgBtBI,IAAIU,IAAI,YAAaE,gBAfrBZ,IAAIA,IAAG,YAEPoB,gBACApB,IAAIc,IAAI,YAAaK,gBAiBrB,IAAAE,QAAA,EAAAA,QAAApB,aAsBAD,IAAIU,IAAI,SAASY,EAAKC,EAAKC,GAtB3BA,EAAA/C,YAAA,QAGuE6B,IAAAA,IAAAA,SAAAA,EAAOgB,EAAAC,EAAAC,GAC1EC,EAAAA,OAAAA,QAAUlB,EAAMmB,QACdH,EAAAI,OAAAhB,MAA6BH,gBAArBc,EAAAtB,IAAOT,IAAAA,OAAPiB,EAAA,GAGNoB,EAAAA,OAAAA,EAAAA,QAAgBzB,KAAUC,EAAAA,OAAAA,WAADyB,OAAAC,QARjC9B","file":"app.min.js","sourcesContent":["var createError = require('http-errors');\r\nvar express = require('express');\r\nvar path = require('path');\r\nvar cookieParser = require('cookie-parser');\r\nvar logger = require('morgan');\r\nrequire('dotenv').config();\r\nconst connectionString =\r\nprocess.env.MONGO_CON\r\nmongoose = require('mongoose');\r\nmongoose.connect(connectionString,\r\n{useNewUrlParser: true,\r\nuseUnifiedTopology: true});\r\n//Get the default connection\r\n\r\nvar db = mongoose.connection;\r\n//Bind connection to error event\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\ndb.once(\"open\", function(){\r\nconsole.log(\"Connection to DB succeeded\")});\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar EmployeeRouter = require('./routes/Employee');\r\nvar gridbuildRouter = require('./routes/gridbuild');\r\nvar resourceRouter = require('./routes/resource');\r\nvar selectorRouter = require('./routes/selector');\r\nvar Employee = require(\"./models/Employee\");\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/gridbuild', gridbuildRouter);\r\napp.use('/Employee', EmployeeRouter);\r\napp.use('/selector', selectorRouter);\r\n\r\napp.use('/resource', resourceRouter);\r\n// We can seed the collection if needed on server start\r\nasync function recreateDB(){\r\n // Delete everything\r\n    await Employee.deleteMany();\r\n    let instance1 = new Employee({EmpName:\"Sowji\", EmpType:\"Permanent\",EmpSal:1000});\r\n    instance1.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"First object saved\")\r\n      });\r\n    let instance2 = new Employee({EmpName:\"Sai\", EmpType:\"Temporary\",EmpSal:2000});\r\n    instance2.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"second object saved\")\r\n      });\r\n      let instance3 = new Employee({EmpName:\"Kusuma\", EmpType:\"Temporary\",EmpSal:3000});\r\n    instance3.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"Third object saved\")\r\n      });\r\n}\r\nlet reseed = true;\r\nif (reseed) { recreateDB();}\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\n\r\nmodule.exports = app;"]}