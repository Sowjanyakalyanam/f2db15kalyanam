{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","passport","path","Strategy","config","process","env","MONGO_CON","mongoose","connect","connectionString","useNewUrlParser","useUnifiedTopology","db","on","console","log","EmployeeRouter","gridbuildRouter","connection","selectorRouter","error","once","app","set","join","__dirname","indexRouter","usersRouter","use","json","extended","secret","resave","resourceRouter","saveUninitialized","initialize","Employee","logger","EmpName","EmpType","EmpSal","save","err","doc","Account","LocalStrategy","authenticate","serializeUser","deserializeUser","reseed","recreateDB","req","res","next","instance1","message","get","status","instance2","password","done","username","user","module","exports"],"mappings":"aAAA,IAAIA,YAAcC,QAAQ,eACtBC,QAAUD,QAAQ,WADlBD,KAAAA,QAAcC,QAGdE,aAAeF,QAAQ,iBAFvBC,OAAOD,QAAU,UAIjBG,SAAWH,QAAQ,YAHnBI,cAAeJ,QAAnB,kBAAAK,SAKAL,QAAQ,UAAUM,SAJlB,IAAIJ,iBAMJK,QAAQC,IAAIC,UALZC,SAAUV,QAAGA,YAObU,SAASC,QAAQC,iBANjB,CAAAC,iBAAeb,EAQfc,oBAAoB,IANpBd,IAAAA,GAAQU,SAAUJ,WAClBS,GAAAC,GAAMJ,QAAAA,QACNL,MAAAA,KAAAU,QAAYR,6BACZC,GAAAA,KAAQ,OAAGV,WACXU,QAAQQ,IAACP,gCACRE,IAAAA,YAAeb,QAAhB,kBACAc,YAAAA,QAAoB,kBACpBK,eAAAnB,QAAA,qBAUIoB,gBAAkBpB,QAAQ,sBAR1Be,eAAcM,QASW,qBACzBC,eAAiBtB,QAAQ,qBAR1BgB,SAAYC,QAAQM,qBACpBC,IAAKvB,UAYRwB,IAAIC,IAAI,QAAStB,KAAKuB,KAAKC,UAAW,UAVtCH,IAAII,IAAAA,cAAc7B,OAClByB,IAAIK,IAAAA,OAAW,QAafL,IAAIM,IAAI9B,QAAQ+B,QAZhBP,IAAIN,IAAAA,QAAAA,WAAiBnB,CAAQiC,UAAA,KAc7BR,IAAIM,IAAI7B,gBAbRuB,IAAIL,IAAAA,QAAAA,kBAAAA,CAA0B,CAe5Bc,OAAQ,eAdVC,QAAIC,EAgBFC,mBAAmB,KAEpBZ,IAAIM,IAAI5B,SAASmC,cAhBlBb,IAAIc,IAAAA,SAAWvC,WAkBfyB,IAAIM,IAAI9B,QAAO,OAAQG,KAAKuB,KAAKC,UAAW,YAE5CH,IAAIM,IAAI,IAAKF,aAhBbJ,IAAIC,IAAI,SAAStB,aACjBqB,IAAIC,IAAI,aAARN,iBAEAK,IAAIM,IAAIS,YAARrB,gBACAM,IAAIM,IAAI9B,YAAAqB,gBACqBW,IAAAA,IAAAA,YAAUG,gBAGrCF,IAAAA,QAAQlC,QAAA,oBAKTyB,SAAQtB,aAARsB,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAGOc,SAAKV,cAHZJ,KAAAA,EAIiBK,IAAAA,SAAlB,CAAAW,QAAA,QAAAC,QAAA,YAAAC,OAAA,MACQC,KAAR,SAAsBxB,EAAAA,GAClBW,GAAIc,EAAA,OAAa1B,QAAAA,MAArB0B,GACId,QAAIb,IAAA,wBAIR,IAAAqB,SAAA,CAAAE,QAAA,MAAAC,QAAA,YAAAC,OAAA,MACAC,KAAA,SAAAC,EAAAC,GAgBM,GAAGD,EAAK,OAAO5B,QAAQM,MAAMsB,GAf/BE,QAAS/C,IAAAA,yBACIgD,IAAAA,SAAcD,CAAAA,QAAQE,SAAvCP,QAAA,YAAAC,OAAA,MACSO,KAAAA,SAAcH,EAAQG,GAC/B/C,GAASgD,EAAAA,OAAAA,QAAgBJ,MAAQI,GAkB3BlC,QAAQC,IAAI,wBAlCjBO,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,UAJCU,SAAMJ,IAAE,IAFyBiB,cAAAD,QAAAE,iBAGjCZ,SAAAA,cAAmBU,QAAAG,iBAHc/C,SAAnCgD,gBAAAJ,QAAAI,mBAwBA,IAAAC,QAAA,EAAAA,QAAAC,aAAA5B,IAAAM,IAAA,SAAAuB,EAAAC,EAAAC,GAAAA,EAAAzD,YAAA,QAGQ0D,IAAAA,IAAAA,SAAAA,EAAYH,EAAIf,EAAAA,GAA2BG,EAAAA,OAAAA,QAAQG,EAAAa,QAAYf,EAAAA,OAAAA,MAAO,gBAAAW,EAAA7B,IAAAkC,IAAA,OAAAd,EAAA,GAExEU,EAAAK,OAAAf,EAAGA,QAAK,KACR5B,EAAAA,OAAAA,WAEE4C,SAAAA,IAAAA,IAAAA,cAA0BpB,SAAAA,EAAQqB,EAATC,GAAgBrB,QAAAA,QAAAA,CAAOsB,SAACA,GAAxB,SAAAnB,EAAAoB,GAAoCtB,OAAAA,EAAOoB,EAAAlB,GAA3CoB,EAG3BhD,EAAAA,cAAY6C,GAEkBrB,EAAAA,KAAOwB,GADpCF,EAHH,MAAA,EAAA,CAAAL,QAAA,wBAAAG,EAAAA,MAAUjB,EAAM,CAAAc,QAAA,6BAMdQ,OAAAC,QAAGtB","file":"app.min.js","sourcesContent":["var createError = require('http-errors');\r\nvar express = require('express');\r\nvar path = require('path');\r\nvar cookieParser = require('cookie-parser');\r\nvar logger = require('morgan');\r\nvar passport = require('passport');\r\nvar LocalStrategy = require('passport-local').Strategy;\r\nrequire('dotenv').config();\r\nconst connectionString =\r\nprocess.env.MONGO_CON\r\nmongoose = require('mongoose');\r\nmongoose.connect(connectionString,\r\n{useNewUrlParser: true,\r\nuseUnifiedTopology: true});\r\n//Get the default connection\r\n\r\nvar db = mongoose.connection;\r\n//Bind connection to error event\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\ndb.once(\"open\", function(){\r\nconsole.log(\"Connection to DB succeeded\")});\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar EmployeeRouter = require('./routes/Employee');\r\nvar gridbuildRouter = require('./routes/gridbuild');\r\nvar resourceRouter = require('./routes/resource');\r\nvar selectorRouter = require('./routes/selector');\r\nvar Employee = require(\"./models/Employee\");\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(require('express-session')({\r\n  secret: 'keyboard cat',\r\n  resave: false,\r\n  saveUninitialized: false\r\n }));\r\n app.use(passport.initialize());\r\n app.use(passport.session());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/gridbuild', gridbuildRouter);\r\napp.use('/Employee', EmployeeRouter);\r\napp.use('/selector', selectorRouter);\r\n\r\napp.use('/resource', resourceRouter);\r\n// passport config\r\n// Use the existing connection\r\n// The Account model\r\nvar Account =require('./models/account');\r\npassport.use(new LocalStrategy(Account.authenticate()));\r\npassport.serializeUser(Account.serializeUser());\r\npassport.deserializeUser(Account.deserializeUser());\r\n// We can seed the collection if needed on server start\r\nasync function recreateDB(){\r\n // Delete everything\r\n    await Employee.deleteMany();\r\n    let instance1 = new Employee({EmpName:\"Sowji\", EmpType:\"Permanent\",EmpSal:1000});\r\n    instance1.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"First object saved\")\r\n      });\r\n    let instance2 = new Employee({EmpName:\"Sai\", EmpType:\"Temporary\",EmpSal:2000});\r\n    instance2.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"second object saved\")\r\n      });\r\n      let instance3 = new Employee({EmpName:\"Kusuma\", EmpType:\"Temporary\",EmpSal:3000});\r\n    instance3.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"Third object saved\")\r\n      });\r\n}\r\nlet reseed = true;\r\nif (reseed) { recreateDB();}\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\npassport.use(new LocalStrategy(\r\n  function(username, password, done) {\r\n  Account.findOne({ username: username }, function (err, user) {\r\n  if (err) { return done(err); }\r\n  if (!user) {\r\n  return done(null, false, { message: 'Incorrect username.' });\r\n  }\r\n  if (!user.validPassword(password)) {\r\n  return done(null, false, { message: 'Incorrect password.' });\r\n  }\r\n  return done(null, user);\r\n  });\r\n  }\r\n ));\r\n\r\nmodule.exports = app;\r\n"]}