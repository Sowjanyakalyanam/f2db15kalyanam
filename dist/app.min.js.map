{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","passport","path","Strategy","app","use","err","req","res","next","locals","message","logger","get","status","LocalStrategy","username","password","done","user","validPassword","config","connectionString","process","env","mongoose","useNewUrlParser","useUnifiedTopology","db","connection","on","console","error","bind","once","log","indexRouter","usersRouter","EmployeeRouter","gridbuildRouter","selectorRouter","join","__dirname","set","json","secret","resave","saveUninitialized","session","resourceRouter","Employee","EmpName","EmpType","EmpSal","save","doc","Account","authenticate","serializeUser","deserializeUser","urlencoded","reseed","recreateDB","render","module","exports"],"mappings":"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","file":"app.min.js","sourcesContent":["var createError = require('http-errors');\r\nvar express = require('express');\r\nvar path = require('path');\r\nvar cookieParser = require('cookie-parser');\r\nvar logger = require('morgan');\r\nvar passport = require('passport');\r\nvar LocalStrategy = require('passport-local').Strategy;\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\npassport.use(new LocalStrategy(\r\n  function(username, password, done) {\r\n  Account.findOne({ username: username }, function (err, user) {\r\n  if (err) { return done(err); }\r\n  if (!user) {\r\n  return done(null, false, { message: 'Incorrect username.' });\r\n  }\r\n  if (!user.validPassword(password)) {\r\n  return done(null, false, { message: 'Incorrect password.' });\r\n  }\r\n  return done(null, user);\r\n  });\r\n  }\r\n ));\r\nrequire('dotenv').config();\r\nconst connectionString =\r\nprocess.env.MONGO_CON\r\nmongoose = require('mongoose');\r\nmongoose.connect(connectionString,\r\n{useNewUrlParser: true,\r\nuseUnifiedTopology: true});\r\n//Get the default connection\r\n\r\nvar db = mongoose.connection;\r\n//Bind connection to error event\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\ndb.once(\"open\", function(){\r\nconsole.log(\"Connection to DB succeeded\")});\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar EmployeeRouter = require('./routes/Employee');\r\nvar gridbuildRouter = require('./routes/gridbuild');\r\nvar resourceRouter = require('./routes/resource');\r\nvar selectorRouter = require('./routes/selector');\r\nvar Employee = require(\"./models/Employee\");\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(require('express-session')({\r\n  secret: 'keyboard cat',\r\n  resave: false,\r\n  saveUninitialized: false\r\n }));\r\n app.use(passport.initialize());\r\n app.use(passport.session());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/gridbuild', gridbuildRouter);\r\napp.use('/Employee', EmployeeRouter);\r\napp.use('/selector', selectorRouter);\r\n\r\napp.use('/resource', resourceRouter);\r\n// passport config\r\n// Use the existing connection\r\n// The Account model\r\nvar Account =require('./models/account');\r\npassport.use(new LocalStrategy(Account.authenticate()));\r\npassport.serializeUser(Account.serializeUser());\r\npassport.deserializeUser(Account.deserializeUser());\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\n// We can seed the collection if needed on server start\r\nasync function recreateDB(){\r\n // Delete everything\r\n    await Employee.deleteMany();\r\n    let instance1 = new Employee({EmpName:\"Sowji\", EmpType:\"Permanent\",EmpSal:1000});\r\n    instance1.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"First object saved\")\r\n      });\r\n    let instance2 = new Employee({EmpName:\"Sai\", EmpType:\"Temporary\",EmpSal:2000});\r\n    instance2.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"second object saved\")\r\n      });\r\n      let instance3 = new Employee({EmpName:\"Kusuma\", EmpType:\"Temporary\",EmpSal:3000});\r\n    instance3.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"Third object saved\")\r\n      });\r\n}\r\nlet reseed = true;\r\nif (reseed) { recreateDB();}\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n\r\n\r\nmodule.exports = app;\r\n"]}