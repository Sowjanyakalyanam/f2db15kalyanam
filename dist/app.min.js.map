{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","passport","path","Strategy","LocalStrategy","username","password","done","Account","findOne","err","user","validPassword","use","message","config","connectionString","process","env","mongoose","useNewUrlParser","useUnifiedTopology","db","connection","on","console","error","bind","once","log","indexRouter","usersRouter","EmployeeRouter","gridbuildRouter","selectorRouter","join","__dirname","app","set","logger","json","secret","resave","saveUninitialized","session","resourceRouter","Employee","EmpName","EmpType","EmpSal","save","doc","authenticate","serializeUser","deserializeUser","urlencoded","res","next","locals","req","get","status","reseed","recreateDB","render","module","exports"],"mappings":"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","file":"app.min.js","sourcesContent":["var createError = require('http-errors');\r\nvar express = require('express');\r\nvar path = require('path');\r\nvar cookieParser = require('cookie-parser');\r\nvar logger = require('morgan');\r\nvar passport = require('passport');\r\nvar LocalStrategy = require('passport-local').Strategy;\r\n\r\npassport.use(new LocalStrategy(\r\n  function(username, password, done) {\r\n  Account.findOne({ username: username }, function (err, user) {\r\n  if (err) { return done(err); }\r\n  if (!user) {\r\n  return done(null, false, { message: 'Incorrect username.' });\r\n  }\r\n  if (!user.validPassword(password)) {\r\n  return done(null, false, { message: 'Incorrect password.' });\r\n  }\r\n  return done(null, user);\r\n  });\r\n  }\r\n ));\r\nrequire('dotenv').config();\r\nconst connectionString =\r\nprocess.env.MONGO_CON\r\nmongoose = require('mongoose');\r\nmongoose.connect(connectionString,\r\n{useNewUrlParser: true,\r\nuseUnifiedTopology: true});\r\n//Get the default connection\r\n\r\nvar db = mongoose.connection;\r\n//Bind connection to error event\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\ndb.once(\"open\", function(){\r\nconsole.log(\"Connection to DB succeeded\")});\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar EmployeeRouter = require('./routes/Employee');\r\nvar gridbuildRouter = require('./routes/gridbuild');\r\nvar resourceRouter = require('./routes/resource');\r\nvar selectorRouter = require('./routes/selector');\r\nvar Employee = require(\"./models/Employee\");\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(require('express-session')({\r\n  secret: 'keyboard cat',\r\n  resave: false,\r\n  saveUninitialized: false\r\n }));\r\n app.use(passport.initialize());\r\n app.use(passport.session());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/gridbuild', gridbuildRouter);\r\napp.use('/Employee', EmployeeRouter);\r\napp.use('/selector', selectorRouter);\r\n\r\napp.use('/resource', resourceRouter);\r\n// passport config\r\n// Use the existing connection\r\n// The Account model\r\nvar Account =require('./models/account');\r\npassport.use(new LocalStrategy(Account.authenticate()));\r\npassport.serializeUser(Account.serializeUser());\r\npassport.deserializeUser(Account.deserializeUser());\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\n// We can seed the collection if needed on server start\r\nasync function recreateDB(){\r\n // Delete everything\r\n    await Employee.deleteMany();\r\n    let instance1 = new Employee({EmpName:\"Sowji\", EmpType:\"Permanent\",EmpSal:1000});\r\n    instance1.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"First object saved\")\r\n      });\r\n    let instance2 = new Employee({EmpName:\"Sai\", EmpType:\"Temporary\",EmpSal:2000});\r\n    instance2.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"second object saved\")\r\n      });\r\n      let instance3 = new Employee({EmpName:\"Kusuma\", EmpType:\"Temporary\",EmpSal:3000});\r\n    instance3.save( function(err,doc) {\r\n      if(err) return console.error(err);\r\n      console.log(\"Third object saved\")\r\n      });\r\n}\r\nlet reseed = true;\r\nif (reseed) { recreateDB();}\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n\r\n\r\nmodule.exports = app;\r\n"]}