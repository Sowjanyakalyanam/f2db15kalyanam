{"version":3,"sources":["Employee.js"],"names":["Employee","require","exports","Employee_list","req","res","send","Employee_detail","console","log","params","id","findById","result","status","Employee_create_post","Employee_delete","Employee_update_put","JSON","stringify","body","toUpdate","EmpName","EmpType","EmpSal","save","find","theEmployee","Employee_view_all_Page","render","title","results","document"],"mappings":"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","sourcesContent":["var Employee = require('../models/Employee');\r\n// List of all Costumes\r\nexports.Employee_list = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee list');\r\n};\r\n// for a specific Costume.\r\nexports.Employee_detail = async function(req, res) {\r\n    console.log(\"detail\" + req.params.id)\r\n    try {\r\n    result = await Employee.findById( req.params.id)\r\n    res.send(result)\r\n    } catch (error) {\r\n    res.status(500)\r\n    res.send(`{\"error\": document for id ${req.params.id} not found`);\r\n    }\r\n   };\r\n// Handle Costume create on POST.\r\nexports.Employee_create_post = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee create POST');\r\n};\r\n// Handle Costume delete form on DELETE.\r\nexports.Employee_delete = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee delete DELETE ' + req.params.id);\r\n};\r\n// Handle Costume update form on PUT.\r\nexports.Employee_update_put = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee update PUT' + req.params.id);Employee\r\n};\r\n// VIEWS\r\n// Handle Costume update form on PUT.\r\nexports.Employee_update_put = async function(req, res) {\r\n console.log(`update on id ${req.params.id} with body\r\n${JSON.stringify(req.body)}`)\r\n try {\r\n let toUpdate = await Employee.findById( req.params.id)\r\n // Do updates of properties\r\n if(req.body.EmpName) toUpdate.EmpName = req.body.EmpName;\r\n if(req.body.EmpType) toUpdate.EmpType = req.body.EmpType;\r\n if(req.body.EmpSal) toUpdate.EmpSal = req.body.EmpSal;\r\n let result = await toUpdate.save();\r\n console.log(\"Sucess \" + result)\r\n res.send(result)\r\n } catch (err) {\r\n res.status(500)\r\n res.send(`{\"error\": ${err}: Update for id ${req.params.id}\r\nfailed`);\r\n }\r\n};\r\n   // List of all Costumes\r\nexports.Employee_list = async function(req, res) {\r\n    try{\r\n    theEmployee = await Employee.find();\r\n    res.send(theEmployee);\r\n    }\r\n    catch(err){\r\n    res.status(500);\r\n    res.send(`{\"error\": ${err}}`);\r\n    }\r\n   };\r\n   // VIEWS\r\n// Handle a show all view\r\nexports.Employee_view_all_Page = async function(req, res) {\r\n    try{\r\n    theEmployee = await Employee.find();\r\n    res.render('Employee', { title: 'Employee Search Results', results: theEmployee });\r\n    }\r\n    catch(err){\r\n    res.status(500);\r\n    res.send(`{\"error\": ${err}}`);\r\n    }\r\n   };\r\n   // Handle Costume create on POST.\r\nexports.Employee_create_post = async function(req, res) {\r\n    console.log(req.body)\r\n    let document = new Employee();\r\n    // We are looking for a body, since POST does not have query parameters.\r\n    // Even though bodies can be in many different formats, we will be picky\r\n    // and require that it be a json object\r\n    // {\"costume_type\":\"goat\", \"cost\":12, \"size\":\"large\"}\r\n    document.EmpName = req.body.EmpName;\r\n    document.EmpType = req.body.EmpType;\r\n    document.EmpSal = req.body.EmpSal;\r\n    try{\r\n    let result = await document.save();\r\n    res.send(result);\r\n    }\r\n    catch(err){\r\n    res.status(500);\r\n    res.send(`{\"error\": ${err}}`);\r\n    }\r\n}\r\n"],"file":"Employee.dev.js"}