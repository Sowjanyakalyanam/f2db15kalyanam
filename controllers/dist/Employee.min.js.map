{"version":3,"sources":["Employee.js"],"names":["Employee","require","exports","req","res","send","regeneratorRuntime","async","_context","prev","next","console","log","params","id","awrap","findById","result","sent","Employee_detail","t0","status","concat","stop","Employee_create_post","Employee_update_put","toUpdate","_result","_context2","JSON","stringify","body","EmpName","EmpType","EmpSal","save","Employee_list","_context3","find","theEmployee","Employee_view_all_Page","_context4","render","title","results","document","_result2","_context5"],"mappings":"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","file":"Employee.min.js","sourcesContent":["var Employee = require('../models/Employee');\r\n// List of all Costumes\r\nexports.Employee_list = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee list');\r\n};\r\n// for a specific Costume.\r\nexports.Employee_detail = async function(req, res) {\r\n    console.log(\"detail\" + req.params.id)\r\n    try {\r\n    result = await Employee.findById( req.params.id)\r\n    res.send(result)\r\n    } catch (error) {\r\n    res.status(500)\r\n    res.send(`{\"error\": document for id ${req.params.id} not found`);\r\n    }\r\n   };\r\n// Handle Costume create on POST.\r\nexports.Employee_create_post = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee create POST');\r\n};\r\n// Handle Costume delete form on DELETE.\r\nexports.Employee_delete = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee delete DELETE ' + req.params.id);\r\n};\r\n// Handle Costume update form on PUT.\r\nexports.Employee_update_put = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee update PUT' + req.params.id);Employee\r\n};\r\n// VIEWS\r\n// Handle Costume update form on PUT.\r\nexports.Employee_update_put = async function(req, res) {\r\n console.log(`update on id ${req.params.id} with body\r\n${JSON.stringify(req.body)}`)\r\n try {\r\n let toUpdate = await Employee.findById( req.params.id)\r\n // Do updates of properties\r\n if(req.body.EmpName) toUpdate.EmpName = req.body.EmpName;\r\n if(req.body.EmpType) toUpdate.EmpType = req.body.EmpType;\r\n if(req.body.EmpSal) toUpdate.EmpSal = req.body.EmpSal;\r\n let result = await toUpdate.save();\r\n console.log(\"Sucess \" + result)\r\n res.send(result)\r\n } catch (err) {\r\n res.status(500)\r\n res.send(`{\"error\": ${err}: Update for id ${req.params.id}\r\nfailed`);\r\n }\r\n};\r\n   // List of all Costumes\r\nexports.Employee_list = async function(req, res) {\r\n    try{\r\n    theEmployee = await Employee.find();\r\n    res.send(theEmployee);\r\n    }\r\n    catch(err){\r\n    res.status(500);\r\n    res.send(`{\"error\": ${err}}`);\r\n    }\r\n   };\r\n   // VIEWS\r\n// Handle a show all view\r\nexports.Employee_view_all_Page = async function(req, res) {\r\n    try{\r\n    theEmployee = await Employee.find();\r\n    res.render('Employee', { title: 'Employee Search Results', results: theEmployee });\r\n    }\r\n    catch(err){\r\n    res.status(500);\r\n    res.send(`{\"error\": ${err}}`);\r\n    }\r\n   };\r\n   // Handle Costume create on POST.\r\nexports.Employee_create_post = async function(req, res) {\r\n    console.log(req.body)\r\n    let document = new Employee();\r\n    // We are looking for a body, since POST does not have query parameters.\r\n    // Even though bodies can be in many different formats, we will be picky\r\n    // and require that it be a json object\r\n    // {\"costume_type\":\"goat\", \"cost\":12, \"size\":\"large\"}\r\n    document.EmpName = req.body.EmpName;\r\n    document.EmpType = req.body.EmpType;\r\n    document.EmpSal = req.body.EmpSal;\r\n    try{\r\n    let result = await document.save();\r\n    res.send(result);\r\n    }\r\n    catch(err){\r\n    res.status(500);\r\n    res.send(`{\"error\": ${err}}`);\r\n    }\r\n}\r\n"]}