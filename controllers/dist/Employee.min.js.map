{"version":3,"sources":["Employee.js"],"names":["Employee","require","exports","req","res","send","params","id","Employee_detail","Employee_delete","Employee_create_post","Employee_update_put","Employee_list","regeneratorRuntime","async","_context","prev","next","awrap","find","sent","theEmployee","t0","status","stop","Employee_view_all_Page","_context2","render","title","results","concat","document","_result","_context3","console","log","body","EmpName","EmpType","EmpSal","save","result","_context4","findById","toUpdate","_result2","_context5","JSON","stringify","_context6","findByIdAndDelete","query","toShow","_context7","err","_result3","_context8","_context9"],"mappings":"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","file":"Employee.min.js","sourcesContent":["var Employee = require('../models/Employee');\r\n// List of all Employees\r\nexports.Employee_list = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee list');\r\n};\r\n// for a specific Employee.\r\nexports.Employee_detail = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee detail: ' + req.params.id);\r\n};\r\n// Handle Employee create on POST.\r\nexports.Employee_create_post = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee create POST');\r\n};\r\n// Handle Employee delete form on DELETE.\r\nexports.Employee_delete = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee delete DELETE ' + req.params.id);\r\n};\r\n// Handle Employee update form on PUT.\r\nexports.Employee_update_put = function(req, res) {\r\n res.send('NOT IMPLEMENTED: Employee update PUT' + req.params.id);\r\n};\r\n// VIEWS\r\n\r\n   // List of all Employees\r\nexports.Employee_list = async function(req, res) {\r\n    try{\r\n    theEmployee = await Employee.find();\r\n    res.send(theEmployee);\r\n    }\r\n    catch(err){\r\n    res.status(500);\r\n    res.send(`{\"error\": ${err}}`);\r\n    }\r\n   };\r\n   // VIEWS\r\n// Handle a show all view\r\nexports.Employee_view_all_Page = async function(req, res) {\r\n    try{\r\n    theEmployee = await Employee.find();\r\n    res.render('Employee', { title: 'Employee Search Results', results: theEmployee });\r\n    }\r\n    catch(err){\r\n    res.status(500);\r\n    res.send(`{\"error\": ${err}}`);\r\n    }\r\n   };\r\n   // Handle Employee create on POST.\r\nexports.Employee_create_post = async function(req, res) {\r\n    console.log(req.body)\r\n    let document = new Employee();\r\n    // We are looking for a body, since POST does not have query parameters.\r\n    // Even though bodies can be in many different formats, we will be picky\r\n    // and require that it be a json object\r\n    // {\"EmpSal\":\"goat\", \"cost\":12, \"size\":\"large\"}\r\n    document.EmpName = req.body.EmpName;\r\n    document.EmpType = req.body.EmpType;\r\n    document.EmpSal = req.body.EmpSal;\r\n    try{\r\n    let result = await document.save();\r\n    res.send(result);\r\n    }\r\n    catch(err){\r\n    res.status(500);\r\n    res.send(`{\"error\": ${err}}`);\r\n    }\r\n}\r\n// for a specific Employee.\r\nexports.Employee_detail = async function(req, res) {\r\n    console.log(\"detail\" + req.params.id)\r\n    try {\r\n    result = await Employee.findById( req.params.id)\r\n    res.send(result)\r\n    } catch (error) {\r\n    res.status(500)\r\n    res.send(`{\"error\": document for id ${req.params.id} not found`);\r\n    }\r\n   };\r\n   // Handle Employee update form on PUT.\r\nexports.Employee_update_put = async function(req, res) {\r\n console.log(`update on id ${req.params.id} with body\r\n${JSON.stringify(req.body)}`)\r\n try {\r\n let toUpdate = await Employee.findById( req.params.id)\r\n // Do updates of properties\r\n if(req.body.EmpName) toUpdate.EmpName = req.body.EmpName;\r\n if(req.body.EmpSal) toUpdate.EmpSal = req.body.EmpSal;\r\n if(req.body.EmpType) toUpdate.EmpType = req.body.EmpType;\r\n let result = await toUpdate.save();\r\n console.log(\"Sucess \" + result)\r\n res.send(result)\r\n } catch (err) {\r\n res.status(500)\r\n res.send(`{\"error\": ${err}: Update for id ${req.params.id}\r\nfailed`);\r\n }\r\n};\r\n// Handle Employee delete on DELETE.\r\nexports.Employee_delete = async function(req, res) {\r\n    console.log(\"delete \" + req.params.id)\r\n    try {\r\n    result = await Employee.findByIdAndDelete( req.params.id)\r\n    console.log(\"Removed \" + result)\r\n    res.send(result)\r\n    } catch (err) {\r\n    res.status(500)\r\n    res.send(`{\"error\": Error deleting ${err}}`);\r\n    }\r\n    };\r\n// Handle a show one view with id specified by query\r\nexports.Employee_view_one_Page = async function(req, res) {\r\n    console.log(\"single view for id \" + req.query.id)\r\n    try{\r\n    result = await Employee.findById( req.query.id)\r\n    res.render('Employeedetail',\r\n    { title: 'Employee Detail', toShow: result });\r\n    }\r\n    catch(err){\r\n    res.status(500)\r\n    res.send(`{'error': '${err}'}`);\r\n    }\r\n    };\r\n// Handle building the view for creating a Employee.\r\n// No body, no in path parameter, no query.\r\n// Does not need to be async\r\nexports.Employee_create_Page = function(req, res) {\r\n    console.log(\"create view\")\r\n    try{\r\n    res.render('Employeecreate', { title: 'Employee Create'});\r\n    }\r\n    catch(err){\r\n    res.status(500)\r\n    res.send(`{'error': '${err}'}`);\r\n    }\r\n    };\r\n// Handle building the view for updating a Employee.\r\n// query provides the id\r\nexports.Employee_update_Page = async function(req, res) {\r\n    console.log(\"update view for item \"+req.query.id)\r\n    try{\r\n    let result = await Employee.findById(req.query.id)\r\n    res.render('Employeeupdate', { title: 'Employee Update', toShow: result });\r\n    }\r\n    catch(err){\r\n    res.status(500)\r\n    res.send(`{'error': '${err}'}`);\r\n    }\r\n    };\r\n// Handle a delete one view with id from query\r\nexports.Employee_delete_Page = async function(req, res) {\r\n    console.log(\"Delete view for id \" + req.query.id)\r\n    try{\r\n    result = await Employee.findById(req.query.id)\r\n    res.render('Employeedelete', { title: 'Employee Delete', toShow:\r\n    result });\r\n    }\r\n    catch(err){\r\n    res.status(500)\r\n    res.send(`{'error': '${err}'}`);\r\n    }\r\n    };"]}